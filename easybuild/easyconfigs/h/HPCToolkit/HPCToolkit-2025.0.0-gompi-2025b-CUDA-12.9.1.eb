easyblock = 'MesonNinja'

name = 'HPCToolkit'
version = '2025.0.0'
versionsuffix = '-CUDA-%(cudaver)s'

homepage = 'https://hpctoolkit.org/'
description = """
HPCToolkit is an integrated suite of tools for measurement and analysis of program
performance on computers ranging from multicore desktop systems to GPU-accelerated
supercomputers. By using statistical sampling of timers and hardware performance
counters on CPUs, HPCToolkit collects accurate measurements of a program's CPU
work, resource consumption, and inefficiency and attributes them to the full
calling context in which they occur. By monitoring GPU operations, gathering
instruction-level metrics within GPU kernels, and attributing the costs of GPU work
to heterogeneous calling contexts. HPCToolkit provides insight into the performance
of GPU-accelerated codes. HPCToolkit works with multilingual, fully optimized
applications that are statically or dynamically linked. HPCToolkit is designed for
use on large parallel systems. HPCToolkit's presentation tools enable rapid analysis
of a program's execution costs, inefficiency, and scaling characteristics both
within and across nodes of a parallel system. HPCToolkit supports measurement and
analysis of serial codes, threaded codes (e.g. pthreads, OpenMP), MPI, and hybrid
(MPI+threads) parallel codes, as well as GPU-accelerated codes that offload
computation to AMD, Intel, or NVIDIA GPUs.
"""

toolchain = {'name': 'gompi', 'version': '2025b'}

source_urls = ['https://gitlab.com/hpctoolkit/hpctoolkit/-/archive/%(version)s/']
sources = [SOURCELOWER_TAR_GZ]
checksums = ['57a198247879a1cc125982562fe2710db6af4aeacb78c1d7f0dc1de5ca55da88']

builddependencies = [
    ('Meson', '1.8.2'),
    ('Ninja', '1.13.0'),
    ('pkgconf', '2.4.3'),
    ('CMake', '3.31.8'),
    ('googletest', '1.17.0'),
    ('yaml-cpp', '0.8.0'),
]

dependencies = [
    ('Boost', '1.88.0'),
    ('CUDA', '12.9.1', '', SYSTEM),
    ('Dyninst', '13.0.0'),
    ('PAPI', '7.2.0'),
    ('Xerces-C++', '3.3.0'),
    ('elfutils', '0.193'),
    ('libunwind', '1.8.2'),
    ('tbb', '2022.2.0'),
    ('xxHash', '0.8.3'),
]

if ARCH == 'x86_64':
    dependencies.append(('intel-XED', '2025.06.08'))

configopts = "-Dtests=enabled -Dmanpages=disabled -Dmanual=disabled -Dhpcprof_mpi=enabled "
configopts += "-Dpapi=enabled -Dcuda=enabled -Dgtpin=disabled -Drocm=disabled -Dopencl=disabled "
configopts += "-Dvalgrind_annotations=false -Dpython=disabled "

# Tests can be flaky on a compute node, failing because it picks up an additional string the regex
# check does not expect. Additionally, CUPTI PC sampling tests can fail if one has insufficient permissions.
runtest = "meson test"

local_preload_libs = [
    'gprof', 'libc_alloc', 'libc_io', 'libc_sync', 'libdl_dlmopen', 'libdl'
]

sanity_check_paths = {
    'files':
        ['bin/hpcrun', 'include/hpctoolkit.h'] +
        ['lib/libhpcrun_preload_%s.%s' % (a, SHLIB_EXT) for a in local_preload_libs] +
        [f'lib/libhpcrun.{SHLIB_EXT}', f'lib/libhpctoolkit.{SHLIB_EXT}', f'lib/libhpcrun_dlopen_nvidia.{SHLIB_EXT}'],
    'dirs': [],
}

sanity_check_commands = [
    'hpcrun --version',
    'hpcstruct --version | grep %(version)s',
    'hpcprof --version',
]

moduleclass = 'perf'
